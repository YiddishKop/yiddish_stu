* 廖雪峰GIT
** 创建版本库
   - 初始化： git init
   - 添加文件： git add <file>   git commit
*** 工作区--修改--add--index(索引)--commit--本地分支
** 时光穿梭机
   - 随时查看工作区状态：
     - 有没有修改： git status #查看的是工作区的修改状态，随时监控
     - 修改了什么： git diff
*** 版本回退：
     - 每次commit都会产生一个版本
     - HEAD指向当前正在处理的工作区（有待提交的commit结点）
     - 查看提交历史：git log
     - 回到过去：
       - git reset --hard HEAD^
       - git reset --hard commit_id
     - 查看命令历史： git reflog
     - 回到现在：
       - git reset --hard commit_id
**** 通过git log| git reflog 获得commit_id 用于在过去和未来穿梭git reset --hard commit_id
*** 工作和暂存区
   - .git 中有什么
     - index或叫stage区
     - Git为我们自动创建的第一个分支master 指向master的一个指针叫HEAD
*** 管理修改
   - git最牛逼的地方是：管理修改
   - 查看修改： git diff HEAD -- readme.txt
   - 第一次修改 -> git add -> 第二次修改 -> git add -> git commit
*** 撤销修改
   - 丢弃工作区修改：git checkout -- file
   - 丢弃暂存区修改：git reset HEAD file
   - 丢弃分支修改(版本回退)：git reset --hard HEAD^/commit_id
*** 巧妙应对误删
   - 描述： 
     1. 文件管理器中 $ rm test.txt
     2. 确定要删，就执行： git rm 而后 git commit
     3. 误删了，就执行：git checkout
** 远程仓库
*** 通过.ssh连接远程库
   - 创建.ssh 拷贝id.rsa_pub文件内容至github
   - $ ssh-keygen -t rsa -C "youremail@example.com"
   - 这条命令会在用户目录创建 .ssh文件
*** 使用github
   - git clone git@github.com:Emacs/
** 分支管理
*** 创建与合并分支
    - 分支：多个提交（附带时间戳）--结点--连成时间线
    - HEAD-->分支指针(master等等)-->commit_node
    - 在某分支新建分支 等同于 新建指向某分支正在指向的指针
    - 不同的指针代表不同的分支
    - 查看分支：git branch
    - 创建分支：git branch <name>
    - 切换分支：git checkout <name>
    - 创建+切换：git checkout -b <name>
    - 合并某分支到当前分支：git merge <name>
    - 删除分支：git branch -d <name>
*** 冲突解决
    - 先解决冲突即修改文件之后，add，commit
    - 查看合并分支图 $ git log --graph --pretty=oneline
*** 分支管理策略
    - 分支管理原则：master-dev-personals
      #+BEGIN_SRC git
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，
比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev
分支上合并就可以了。 
    #+END_SRC
    - git merge --no-ff -m "merge with no fast forward"
      合并分支时，加上--no-ff参数就可以用普通模式合并，
      合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看
      不出来曾经做过合并。
*** bug分支
    - 在Git中，每个bug都可以通过一个新的临时分支来修复
    - 首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
    - 处理当前工作：
      - $ git stash #压栈暂存区，并清除工作区中与暂存区相同的文件
      - $ git stash list
      - $ git stash apply stash@{n}
      - $ git stash pop
*** 多人协作
    - 克隆分支
      - $ git clone #克隆master分支
      - $ git checkout -b dev origin/dev #克隆origin其他分支
    - 推送分支
      - $ git push [库名] [分支名]
      - $ git push origin master
      - $ git push origin dev
    - 拉版本
      - 指定分支链接： $ git branch --set-upstream dev origin/dev
      - pull分支：$ git pull
**** 多人工作模式
     因此，多人协作的工作模式通常是这样：

     1. 可以试图用git push origin branch-name推送自己的修改；
     2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
     3. 如果合并有冲突，则解决冲突，并在本地提交；
     4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
     如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
     5. 用命令git branch --set-upstream branch-name origin/branch-name。
     
     这就是多人协作的工作模式，一旦熟悉了，就非常简单
** 标签管理
*** 创建标签
   - 标签是本地的，远程需要push
   - 标签是版本库的快照
   - 也是指向commit的不可移动的指针
   - 命令git tag <name> <commit_id>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
   - git tag -a <tagname> -m "blablabla..." <commit_id>可以指定标签信息；
   - git tag -s <tagname> -m "blablabla..." <commit_id>可以用PGP签名标签；
   - 命令git tag可以查看所有标签。
*** 操作标签
    - 命令git push origin <tagname>可以推送一个本地标签；
    - 命令git push origin --tags可以推送全部未推送过的本地标签；
    - 命令git tag -d <tagname>可以删除一个本地标签；
    - 命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
* git in shiyanlou
* snapshot理念--git记录每次提交的文件的全部内容
* git对象模型
** sha
    - shai哈希（对象内容） = 对象名
    - 40字对象名：6ff87c4664981e4397625791c8ea3bbb5f2279a3
    - 表示项目历史信息
** 对象
*** 包括
   - 大小
   - 内容
   - 类型
     - blob：存储文件数据，通常是一个文件
     - tree：像一个目录，管理一些tree和blob
     - commit：指向一个tree，标记项目某一特点时间点的状态，包括元数据，时间戳，最近提交作者等
     - tag：标记某一个提交commit的方法
+++----+对象-纯数据、不指向、无属性
+++ - $|git show [blob SHAI哈希值] #查看blob内容
 |  - 一| blob对象就是一块二进制数据，不指向，无属性
 +----- + 文件在一个目录树中内容相同，则共享一个blob对象
*** tree对象
    - tree像葡萄
    - 有一串（bunch）指向blob或其他tree的指针，表示内容之间目录层次关系
    - $ git ls-tree [tree SHAI哈希值] #查看tree内容
    - 该命令内容： mode，对象类型，SHAI值，名字
    - mode 一般都是 644或755，why?
*** commit对象
    - tree指针
    - $ git s-ow -s --pretty=raw [commit SHAI哈希值]#查看commit信息
    - 该命令包括：
      1. tree：该tree的SHAI签名 #代表目录某一时间点的内容
      2. 父对象（parents）：上次提交的项目历史（merge commit可能不止一个父对象）
      3. 修改者：做了此次修改的人，修改日期
      4. 提- 者：创建提交的人，提交日期（提交人是修改人的代理人，比如代理人去银行取款）
      5. 注释：描述此次提交
    - 注意：一个commit并没有说明做了哪些修改；所有修改都是通过与父提交(parents)内容比较得出
    - 一般用 git commit 来创建一个提交(commit), 这个提交(commit)的父对象一般是当前分支(current HEAD),　同时把存
      储在当前索引(index)的内容全部提交
*** 对象模型
    - 每个目录都创建了 tree对象 (包括根目录), 每个文件都创建了一个对应的 blob对象 . 最后有一个
      commit对象 来指向根tree对象(root of trees), 这样我们就可以追踪项目每一项提交内容.
*** tag对象
    - 包括：
      1. 一个对象名object:对象SHAI签名
      2. 对象类型type:commit/tree等
      3. 标签名tag: eg--v1.5.0
      4. 标签创建人tagger:yuanlong
    - $ git cat-file #查看标签内容
    - $ git tag
    - $ git tag -a v0.1 -m "loucloud v0.1"
    - $ git push origin --tags
* git目录与工作目录
** git目录(.git)
   - 一个项目 一个.git
   - 为整个项目存储所有的历史和元信息
   - .git目录结构
     - HEAD   #该git项目当前所处分支
     - config #项目配置信息 git config命令
     - description  #项目描述信息
     - hooks/ #系统默认狗子脚本目录
     - index  #索引文件
     - logs/  #各个refs历史信息
     - objects/ #git本地仓库所有对象(commit,tree,blob,tag)
     - refs/  #表示项目里的每个分支 指向哪个提交
** 工作目录
   - 存储现在checkout用来编辑的文件
   - 切换分支时工作目录会被替换和删除
** GIT索引
  - 工作目录与项目仓库间的暂存区
  - 方便把修改一起COMMIT
  - 注意： COMMIT提交的是索引(INDEX)的内容，而非工作目录的内容
** 查看索引
   - $ GIT STATUS
* GIT初始化
** GIT配置
   - 设置用户名和邮箱
     $ GIT CONFIG --GLOBAL USER.NAME "YIDDISHKOP"
     $ GIT CONFIG --GLOBAL USER.EMAIL "YIDDISHKOP@163.COM"
** 获得GIT仓库
   - 从已有的GIT仓库CLONE
     $ GIT CLONE *GITURL*
   - 新建仓库，进行版本控制
     $ CD PROJECT
     $ GIT INIT
     通过LA命令发现PROJECT下有一个名叫“.GIT”的目录被创建
** 正常的工作流程
   - 增删改文件
   - $ GIT ADD FILE1 FILE2 ... #GIT索引中添加文件
   - $ GIT DIFF --CACHED #查看将被提交文件
   - $ GIT DIFF #当前所以已做但没有加入到索引的修改
   - $ GIT STATUS #查看当前项目状态
   - $ GIT COMMIT -M "PUT A MESSAGE TO COMMIT"
   - $ GIT COMMIT -A -M "PUT A MESG TO COMMIT"
     - 把所有内容被修改的文件(不包括新创建的文件)都添加到索引中，并且同时把它们提交。
   - 与.GIT在同一目录的文件 = ($ GIT ADD)被加入索引的 + 没被加入索引的
   - 用 $ GIT STATUS 查看:
     - 没被加入索引的 = UNTRACKED FILES
     - 被GIT ADD加入所以的 = CHANGED TO BE COMMITED（如果有改动）
** 合并与分支
   - 分支
     - 创建新分支：  $ GIT BRANCH EXPERIMENTAL
     - 查看所有分支： $ GIT BRANCH
     - 切换分支： $ GIT CHECKOUT BRANCH
       - 分之内做的修改，COMMIT之后 不会在另一个分支显现，需合并
   - 合并
     - 合并分支到本分支： $ GIT MERGE EXPERIMENTAL
     - 查看冲突： $ GIT DIFF
     - 删除被当前分支合并的分支： $ GIT BRANCH -D EXPERIMENTAL
     - 强制删除： $ GIT BRANCH -D CRAZY-IDEA
   - 解决合并中的冲突
     冲突文件存在索引中，编辑解决冲突，然后执行
     - $ GIT ADD FILE.TXT
     - $ GIT COMMIT -M "PUT A MSG TO COMMIT"
   - 撤销合并
     - $ GIT RESET --HARD HEAD
     - $ GIT RESET --HARD ORIG_HEAD #强制撤销，用于撤销已经提交的
** GIT日志
*** 查看日志
    - $ GIT LOG
*** 日志统计
    - $ GIT LOG --STAT
*** 格式化日志
    - $ GIT LOG --PRETY=ONELINE
    - $ GIT LOG --GRAPH
*** 日志排序
    - $ GIT LOG --TOPO-ORDER #拓扑排序（显示'开发线'）
    - $ GIT LOG --DATE-ORDER #时间排序
    - $ GIT LOG --DATE-ORDER --REVERSE #逆序
** 工作目录 --- GIT索引 --- GIT仓库
* 比较提交-git diff
** 显示两个分支间的差异
  - 如果你想找出‘master’,‘test’的共有父分支和'test'分支之间的差异，
    你用3个'.'来取代前面的两个'.'
    - $ git diff master..test
    - $ git diff master...test
  - 哪些内容会被提交
    - $ git diff HEAD #HEAD指针指向当前工作目录
    - $ git diff HEAD -- ./lib #上面这条命令会显示你当前工作目录下的lib目录与上次提交之间的差别 
    - $ git diff --stat #全局性的查看哪些文件被修改
** 分布式的工作流程
   1. 从他处clone并命名为myrepo：$ git clone /home/shiyanlou/gitproject myrepo
   2. 从远程clone会产生一个文件：$ git config --get remote.origin.url
   3. 对myrepo进行修改
   4. gitproject需要把myrepo的修改拉(pull)下来:
      - git pull /home/shianlou/myrepo master
      - git pull命令执行两个操作: 它从远程分支(remote branch)抓取修改 的内容，然后把它合并进当前的分支。 
   5. 如果经常操作输入目录很烦，可以定义别名：
      - $ git remote add myrepo /home/shiyanlou/myrepo
      - 上面命令的意思：添加远程的一个别名myrepo，工作目录为...，它产生了一个叫做myrepo/master的假分支
      - 假分支通过git branch查不到，仅仅为了merge而已
      - 至此git pull命令 = git fetch [别名myrepo] + git merge myrepo/master
      - 当然仍可以用pull：$ git pull . remotes/myrepo/master
        注意：git pull 会把远程分支合并进当前的分支里，而不管你在命令行里指定什么。
   6. 注意，push之前先pull是良好的习惯
