* 用docker搭建开发环境
** 感性认识docker，它看起来像什么
  - 我感觉docker安装起来就像装系统的ghost，比如180m的image（ubuntu14.1）可以快速使用。
  - 其原理又像是‘虚拟机’，比如cgroup提供资源分配，用容器隔离，用aufs实现快速部署。
  - 又感觉dockers很想java语言，因为‘Docker背后的想法是创建软件程序可移植的轻量容器，
    让其可以在任何安装了Docker的机器上运行.
  - 因为dockfile（自动化镜像）的缘故，还感觉这玩意像makefile，自动化编译。

** 核心概念
*** container  
**** 容器与虚拟机
   - 一个容器一个进程 一个虚拟机多个进程
   - 容器是设计来运行一个应用的，而非一台机器
   - Docker允许你定义应用部分和数据部分，并提供工具让你可以将它们分开。
   - 使用Docker时必须做出的最大思维变化之一就是：容器应该是短暂和一次性的。
*** image  
   - 你可以从镜像中创建容器，这等同于从快照中创建虚拟机
     1. 下载镜像
     2. 修改镜像
     3. 从镜像中创建容器
*** 数据卷(数据持久化)
     1. 他表现为容器内的空间，但实际保存在容器之外
     2. 允许你在不影响数据的情况下销毁、重建、修改、丢弃容器
     3. 保存在运行Docker的宿主文件系统上，你可以指定卷存放的目录，或让Docker保存在默认位置。
     4. 卷还可以用来在容器间共享数据
*** 链接
    - 容器间链接(通信)原理：私有ip
    容器启动，将被分配一个随机的私有IP，其它容器可以使用这个IP地址与其进行通讯。
    这点非常重要，原因有二：
    一是它提供了容器间相互通信的渠道，
    二是容器将共享一个本地网络。
    - 建立关系方法： 创建时引用并起外号（别名）
** 预备知识
*** cgroup
    Cgroup是将任意进程进行分组化管理的Linux内核功能。cgroup本身提供将进程进行分组化管理的功能和接口的基础结构。
*** 网络隔离
    网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址
*** LXC-LinuX Container
    - linux 命名空间学习[此处略深，需自己学习]
    - 相当于C++中的NameSpace。
    - Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。
*** AUFS
    - 啥是分层
      文件系统可以被装载在其他文件系统之上，其结果就是一个分层的积累变化。
    - 上下层关系（仅仅记录变化）
      1. 每个装载的文件系统表示前一个文件系统之后的变化集合，就像是一个diff
      2. 当你下载一个镜像，修改它，然后保存成新版本，你只是创建了加载在包裹基础镜像的初始层上的一个新的union文件系统。
    - docker image aufs
      1. 镜像它指定了union装载点保存在哪里，要公开什么端口等等
      2. 每个镜像与一个union文件系统相关联，每个Docker上的union文件系统都有一个上层
    - aufs container
      1. 容器之所以是短暂的，是因为当你从镜像上创建一个容器，Docker会创建一个空白的union文件系统加载在与该镜像关联的union文件系统之上。
      2. 当你创建一些变化时，文件就能体现出来，但是当容器停止，该容器的union文件系统会被丢弃，留下的是你启动时的原始镜像文件系统。
      3. 除非你创建一个新的镜像，或制作一个卷，你所做的变化在容器停止时都会消失。卷所做的是在容器内指定一个目录，以便在union文件系统之外保存它。

*** PAAS
    platform as a service
** 配置docker
   1. Installation
      - $ which wget
      - $ sudo apt-get update
        $ sudo apt-get install wget
      - $ wget -qO- https://get.docker.com/ | sh
      - $ sudo docker run hello-world #如果这个运行有问题，则需要重启下docker
	$ sudo service docker restart
   2. 下载images文件
      - $ docker pull ubuntu
   3. 列出镜像
      - $ docker images -a
   4. 从镜像获得container
      - $ docker run --rm -ti ubuntu /bin/bash
	1. --rm一旦进程推出(之前说过一容器一进程)就删除容器
      - $ docker ps 查看容器状态 
   5. 删除container
      - $ docker stop $sample_job docker rm $sample_job
   6. 删除镜像
      - $ docker rmi image_name
   7. 保存容器为镜像
      docker commit $sample_job job1
** 应用简介
   - 它促进了模块化和关注点的分离，你只需要去考虑应用的逻辑部分
     （负载均衡：1个容器；数据库：1个容器；web服务器：1个容器）
   - 它允许非常细粒度的优化应用的运行环境：由于你可以为你的容器
     自己创建镜像，就可以自己去配置环境。
